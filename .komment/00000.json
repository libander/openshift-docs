[
  {
    "name": "build_for_portal.py",
    "path": "build_for_portal.py",
    "content": {
      "structured": {
        "description": "A build script that fetches and formats AsciiDoc files from Git repositories for use in creating documentation for various software products. It uses `git` commands to fetch sources, and `configparser` and `filecmp` libraries to manage configuration files and directories. The script builds master files, reformats data for Drupal, and pushes changes back to GitLab repositories.",
        "items": [
          {
            "id": "6c749faf-b312-929b-1842-20163f6c46a7",
            "ancestors": [],
            "description": "Sets up an argument parser using the `argparse` module to define and validate command-line options for a program, including distribution, all-in-one mode, title, product, version, author, upstream URL, branch, and other parameters.",
            "params": [],
            "returns": {
              "type_name": "argparseArgumentParser",
              "description": "An object that encapsulates the command-line-specific runtime data and behavior."
            },
            "usage": {
              "language": "python",
              "code": "parser = setup_parser()\nargs = parser.parse_args([\"--distro\", \"openshift-enterprise\"])\n",
              "description": ""
            },
            "name": "setup_parser",
            "location": {
              "start": 126,
              "insert": 127,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 40,
            "docLength": null
          },
          {
            "id": "b8fce4d2-53f6-b185-304b-8f68c2325b99",
            "ancestors": [
              "2aec7c5b-33e0-0dbf-e14d-c9b34a434a08"
            ],
            "description": "Recursively traverses directory trees and builds a list of directory entries, formatting each entry with indentation according to its depth. The inclusion of an entry depends on either a specified include name or a minimum recursion depth.",
            "params": [
              {
                "name": "dir_node",
                "type_name": "Dict[str, any]",
                "description": "An entry from the directory tree being traversed, representing a single node in the tree, with key-value pairs where 'Name' corresponds to the name of the directory or file."
              },
              {
                "name": "parent_dir",
                "type_name": "str",
                "description": "Referenced within the callback to construct the directory path in the `master_entries` list, but it is not used directly in this particular code snippet."
              },
              {
                "name": "depth",
                "type_name": "int",
                "description": "0-based, representing the current level of recursion when processing directory nodes. It is used to indent the output based on the nesting level of directories."
              }
            ],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "master_entries = []\ndir_callback({\"Name\": \"Documents\"}, None, 0)\ndir_callback({\"Name\": \"Pictures\"}, None, 1)",
              "description": ""
            },
            "name": "dir_callback",
            "location": {
              "start": 387,
              "insert": 388,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "function",
            "length": 5,
            "docLength": null
          },
          {
            "id": "383d89e6-6780-748f-a540-81d631da32f6",
            "ancestors": [
              "2aec7c5b-33e0-0dbf-e14d-c9b34a434a08"
            ],
            "description": "Generates an Asciidoctor include statement based on a topic node, file path, and depth. It appends this statement to the `master_entries` list, potentially prepending and appending comment lines depending on whether the all-in-one mode is enabled and the file is in the COMMENT_FILES set.",
            "params": [
              {
                "name": "topic_node",
                "type_name": "Dict[str, str]",
                "description": "Assumed to contain key-value pairs representing information about a topic file or node in an Asciidoctor book."
              },
              {
                "name": "parent_dir",
                "type_name": "str",
                "description": "Used as part of a file path. It is joined with the value of `topic_node[\"File\"] + \".adoc\"` to create the full path to an adoc file."
              },
              {
                "name": "depth",
                "type_name": "int",
                "description": "Used to adjust the level offset for an included file. This adjustment affects the hierarchy level of the included content within the output book."
              }
            ],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "topic_callback({\"File\": \"test_topic\"}, \".\", 1)\ntopic_callback({\"File\": \"another_test\"}, \".\", 2)",
              "description": ""
            },
            "name": "topic_callback",
            "location": {
              "start": 393,
              "insert": 394,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "function",
            "length": 11,
            "docLength": null
          },
          {
            "id": "21ad7176-73a3-66ac-0242-eea63db9e565",
            "ancestors": [
              "fb3014fd-e2ba-4981-5544-abaec20a1cdc"
            ],
            "description": "Recursively traverses a directory tree, identifying directories with an \"images\" subdirectory and copying all files from that subdirectory to a specified destination directory (`dest_dir`).",
            "params": [
              {
                "name": "dir_node",
                "type_name": "Dict",
                "description": "Expected to contain key-value pairs that represent a directory node in a file system hierarchy, with \"Dir\" being one of its keys."
              },
              {
                "name": "parent_dir",
                "type_name": "str",
                "description": "Used to construct the full path of the current directory node by joining it with the \"Dir\" attribute of the `dir_node`. This provides the base directory for further operations."
              },
              {
                "name": "depth",
                "type_name": "int",
                "description": "Used to indicate the current level of recursion while traversing directory structure. It is not explicitly used within the function, but it is likely intended for logging or printing purposes."
              }
            ],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "dir_nodes = [\n    {\"Dir\": \"images\"},\n    {\"Dir\": \"docs\"}\n]\n\ndir_callback(dir_nodes[0], \"/path/to/source/dir\", 0)\ndir_callback(dir_nodes[1], \"/path/to/source/dir\", 0)",
              "description": ""
            },
            "name": "dir_callback",
            "location": {
              "start": 470,
              "insert": 471,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "function",
            "length": 8,
            "docLength": null
          },
          {
            "id": "604d9e9b-a214-f197-8342-98b3008fb7ae",
            "ancestors": [
              "f4a36a9f-f06e-118a-6a42-75cb194a2a66"
            ],
            "description": "Creates a destination directory path by joining the `dest_dir`, `parent_dir`, and `dir_node`'s \"Dir\" attribute. It then ensures that the directory exists by calling the `ensure_directory` function with this path as an argument.",
            "params": [
              {
                "name": "dir_node",
                "type_name": "Dict",
                "description": "Expected to have key-value pairs representing a directory node, where \"Dir\" is a string representing the name of the directory and other keys represent additional information about the directory."
              },
              {
                "name": "parent_dir",
                "type_name": "str",
                "description": "Used to construct the full destination directory path by joining it with the `dest_dir` and `dir_node[\"Dir\"]`. It represents the parent directory of the current directory being processed."
              },
              {
                "name": "depth",
                "type_name": "int",
                "description": "Used to specify the current level of depth in the directory tree being traversed. It helps calculate the path of each file or subdirectory."
              }
            ],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "dir_node = {\"Dir\": \"test_dir\"}\ndir_callback(dir_node, \"\", 0)",
              "description": ""
            },
            "name": "dir_callback",
            "location": {
              "start": 488,
              "insert": 489,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          },
          {
            "id": "ae50ab32-2e4b-0bbf-b543-4a481f26d2e7",
            "ancestors": [
              "f4a36a9f-f06e-118a-6a42-75cb194a2a66"
            ],
            "description": "Copies a specific file from a source directory to a destination directory based on the provided topic node and parent directory information, preserving the file name and extension.",
            "params": [
              {
                "name": "topic_node",
                "type_name": "Dict[any, any]",
                "description": "Assumed to contain information about a topic node, including the \"File\" key that specifies the name of an adoc file."
              },
              {
                "name": "parent_dir",
                "type_name": "str",
                "description": "Used to construct directory paths for source and destination files related to the topic node being processed."
              },
              {
                "name": "depth",
                "type_name": "int",
                "description": "Used to calculate the directory path for destination files based on the parent directory. It specifies the current level of nesting within the topic tree."
              }
            ],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "topic_node = {\"File\": \"example\"}\nparent_dir = \"topics\"\ndepth = 1\ntopic_callback(topic_node, parent_dir, depth)",
              "description": ""
            },
            "name": "topic_callback",
            "location": {
              "start": 492,
              "insert": 493,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "function",
            "length": 8,
            "docLength": null
          },
          {
            "id": "db4bf866-1761-38b7-214f-ef24c3939565",
            "ancestors": [],
            "description": "Preprocesses and cleans content from a source file by removing unwanted lines, replacing duplicate IDs with new ones, and correcting incorrect links to conform to the format required for the target output.",
            "params": [
              {
                "name": "content",
                "type_name": "str",
                "description": "The text content to be processed for scrubbing purposes. It can be considered as a block of text that needs to be cleaned up according to specific criteria."
              },
              {
                "name": "info",
                "type_name": "Dict[str, any]",
                "description": "Used to store information related to book processing, such as file directories, IDs for titles, mapping of files to IDs, whether to process all files in one pass, and incorrect links."
              },
              {
                "name": "book_src_dir",
                "type_name": "str",
                "description": "Expected to be the directory path of the book source files where the content being scrubbed originates from."
              },
              {
                "name": "src_file",
                "type_name": "str",
                "description": "Used as part of file paths within the content being processed. It is also used to look up information from other data structures, such as TITLE_IDS, FILE_TO_ID_MAP, DUPLICATE_IDS, and INCORRECT_LINKS."
              },
              {
                "name": "tag",
                "type_name": "str | None",
                "description": "Optional. Its presence or absence does not affect the core functionality of the function, indicating it may be used elsewhere in the codebase for logging or reporting purposes."
              },
              {
                "name": "cwd",
                "type_name": "str | None",
                "description": "Used to specify the current working directory for file operations, if provided, otherwise it defaults to None."
              }
            ],
            "returns": {
              "type_name": "str",
              "description": "The scrubbed content after processing the input content according to certain rules and conditions."
            },
            "usage": {
              "language": "python",
              "code": "content = \"\"\"= This is my title (anchor)\nThis is some content with links [[test]]\n\"\"\"\nscrubbed_content = scrub_content(content, info, book_src_dir, src_file)",
              "description": ""
            },
            "name": "scrub_content",
            "location": {
              "start": 670,
              "insert": 671,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 52,
            "docLength": null
          },
          {
            "id": "d4b018a7-aa54-e784-0a4b-1dfa0d3fb401",
            "ancestors": [],
            "description": "Searches for a specific directory (`dir`) within a list of book nodes (`info[\"book_nodes\"]`) and returns the corresponding book name if found. If not found, it logs an error message and appends the error to a list before returning the directory name.",
            "params": [
              {
                "name": "dir",
                "type_name": "str",
                "description": "Used to specify the directory name. It is compared with each book's \"Dir\" attribute to find a match within the list of books defined in the `info` dictionary."
              },
              {
                "name": "src_file",
                "type_name": "str",
                "description": "Used as a placeholder in an error message when a book is not found for a given directory. It is intended to provide context about where the error occurred."
              },
              {
                "name": "info",
                "type_name": "Dict[str, Dict[str, str]]",
                "description": "Assumed to be an object containing information about book directories, represented as dictionaries within a dictionary with key \"book_nodes\"."
              }
            ],
            "returns": {
              "type_name": "str|None",
              "description": "1) a book name if found, or 2) an error message indicating that no book was found for the given directory, or 3) the original directory path if no book is found and there are no errors."
            },
            "usage": {
              "language": "python",
              "code": "dir_to_book_name(\"path/to/directory\", \"source_file.py\", {\"book_nodes\": [{\"Dir\": \"path/to/directory\", \"Name\": \"book name\"}, ...]})",
              "description": ""
            },
            "name": "dir_to_book_name",
            "location": {
              "start": 754,
              "insert": 756,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 12,
            "docLength": null
          },
          {
            "id": "5cfce253-d526-c7ba-a04c-e5eeca3d3379",
            "ancestors": [
              "9d99948b-3a0a-7b9d-2e48-a2983c3b3506"
            ],
            "description": "Takes a topic node, parent directory, and depth as inputs, extracts file IDs from an ADOC source file, and appends these IDs to a list named `book_ids`.",
            "params": [
              {
                "name": "topic_node",
                "type_name": "Dict",
                "description": "Assumed to represent a topic node, which contains attributes such as \"File\" that refer to an Asciidoc file in a parent directory."
              },
              {
                "name": "parent_dir",
                "type_name": "str",
                "description": "A directory path that serves as the parent directory for constructing the source file path by joining it with the topic node's \"File\" attribute."
              },
              {
                "name": "depth",
                "type_name": "int",
                "description": "Passed to this function, possibly indicating a level of nesting or recursion for traversing topic nodes. Its exact purpose and usage are dependent on the context of the code."
              }
            ],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "topic_node = {\"File\": \"test\"}\nparent_dir = \"/path/to/topic/node\"\ndepth = 0\ntopic_callback(topic_node, parent_dir, depth)\nbook_ids = []",
              "description": ""
            },
            "name": "topic_callback",
            "location": {
              "start": 925,
              "insert": 926,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "function",
            "length": 4,
            "docLength": null
          },
          {
            "id": "a5d27484-5fb2-4ab0-054f-bfd8be5cb6b8",
            "ancestors": [
              "e0381cb3-f7e4-dd83-fd4a-6e06a9f98d25"
            ],
            "description": "Builds a mapping between source files and their corresponding IDs based on topic names. It takes three parameters: a topic node, a parent directory, and depth. The function generates an ID for each file using the topic name and adds it to a file-to-ID map.",
            "params": [
              {
                "name": "topic_node",
                "type_name": "Dict[str, Any]",
                "description": "Expected to contain information about a topic, such as its name, file path, and other relevant details that are used to build an ID for each topic."
              },
              {
                "name": "parent_dir",
                "type_name": "str",
                "description": "Used to specify the directory where the topic files are stored. It is used to construct the full path of the source file using the `os.path.join` method."
              },
              {
                "name": "depth",
                "type_name": "int",
                "description": "Used to specify the depth level of the topic node."
              }
            ],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "topic_callback({\"Name\": \"test_topic\", \"File\": \"topic_file\"}, \"/path/to/dir\", 1)\n",
              "description": ""
            },
            "name": "topic_callback",
            "location": {
              "start": 941,
              "insert": 942,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "function",
            "length": 5,
            "docLength": null
          },
          {
            "id": "f2a31658-0763-cb8d-5540-0d5bafce81ac",
            "ancestors": [],
            "description": "Synchronizes two directories by removing files and subdirectories in `right` that exist only there, copying or moving files and subdirectories in common to match those in `left`, and recursively calling itself for subdirectories.",
            "name": "_sync_directories_dircmp",
            "location": {
              "start": 1079,
              "insert": 1081,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 18,
            "docLength": null
          },
          {
            "id": "7496ce3a-6f11-74b2-1740-d7713f8cb9fb",
            "ancestors": [],
            "description": "Parses a configuration file using the configparser module and extracts repository URLs for a specified distribution and version. It checks if the file exists, reads it, and returns a dictionary with the extracted URLs.",
            "params": [
              {
                "name": "config_file",
                "type_name": "str",
                "description": "Expected to be the path to a configuration file. It specifies the source from which the repository configuration should be loaded."
              },
              {
                "name": "distro",
                "type_name": "str",
                "description": "Used to construct the name of the section in the configuration file where repository URLs are stored."
              },
              {
                "name": "version",
                "type_name": "str",
                "description": "Used as part of the section name for parsing configuration files, specifically in combination with the `distro` parameter to form a unique identifier for the configuration section."
              }
            ],
            "returns": {
              "type_name": "Dict[str,str]",
              "description": "A mapping from string keys to strings values representing repository URLs parsed from a configuration file for a specific distribution and version."
            },
            "usage": {
              "language": "python",
              "code": "config_file = \"path_to_your_repo_config\"\ndistro = \"my_distribution\"\nversion = \"latest_version\"\n\nurls = parse_repo_config(config_file, distro, version)",
              "description": ""
            },
            "name": "parse_repo_config",
            "location": {
              "start": 1128,
              "insert": 1130,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 15,
            "docLength": null
          },
          {
            "id": "4bb2e1d1-1dd7-7099-5a4a-360e2ee7d4f0",
            "ancestors": [],
            "description": "Builds Drupal files for a given distribution and version by fetching upstream sources, parsing build configuration, filtering nodes, building master files, reformatting, and pushing changes to GitLab if required.",
            "params": [],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "if __name__ == \"__main__\":\n    main(title=\"My Book\", author=\"Author Name\", version=\"1.0\", product=\"Product Name\", \n         distro=\"distro\", no_upstream_fetch=False, all_in_one=True, push=False)",
              "description": ""
            },
            "name": "main",
            "location": {
              "start": 1146,
              "insert": 1147,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 74,
            "docLength": null
          }
        ]
      }
    }
  }
]